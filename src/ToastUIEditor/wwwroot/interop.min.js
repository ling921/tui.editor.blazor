import"./toastui-editor-all.min.js";export class Editor extends toastui.Editor{dotNetRefs=[];constructor(e){if(!e.el)throw new Error("element is required in options");const t=[];e.events=Object.assign({},...Object.keys(e.events||{}).map((o=>{const r=e.events[o];return t.push(r),{[o]:(...e)=>{"load"===o&&(e=[]);for(let t=0;t<2;t++){if(e.length<=t){e.push(null);continue}const o=e[t];o instanceof KeyboardEvent&&(e[t]={key:o.key,code:o.code,location:o.location,repeat:o.repeat,ctrlKey:o.ctrlKey,shiftKey:o.shiftKey,altKey:o.altKey,metaKey:o.metaKey,type:o.type})}if(r.invokeMethodAsync("InvokeAsync",...e),"beforePreviewRender"===o||"beforeConvertWysiwygToMarkdown"===o)return e[0]}}}))),e.previewStyle=e.previewStyle?.toLowerCase()||"tab",e.initialEditType=e.initialEditType?.toLowerCase()||"markdown";let o=e.theme?.toLowerCase();if("auto"===o){o=window.matchMedia("(prefers-color-scheme: dark)").matches?"dark":"light"}e.theme="dark"===o?"dark":"light",super(e),this.dotNetRefs=t,window.editor=this}destroy(){super.destroy(),this.dotNetRefs.forEach((e=>{e.dispose()}))}}export function initEditor(e){return new Editor(e)}